// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SelectTree renders 1`] = `
{
  "asFragment": [Function],
  "baseElement": .c0 {
  padding-inline-end: 12px;
}

.c3 {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.c1 {
  background: transparent;
  border: none;
  position: relative;
  z-index: 1;
}

.c1 svg {
  height: 1.1rem;
  width: 1.1rem;
}

.c1 svg path {
  fill: #666687;
}

.c2 {
  display: flex;
  background: none;
  border: none;
}

.c2 svg {
  width: 0.9rem;
}

<body>
    <div>
      <div
        class=" css-1iyvlxg-container"
      >
        <span
          class="css-1f43avz-a11yText-A11yText"
          id="react-select-2-live-region"
        />
        <span
          aria-atomic="false"
          aria-live="polite"
          aria-relevant="additions text"
          class="css-1f43avz-a11yText-A11yText"
          role="log"
        />
        <div
          class=" css-oe0cnm-control"
        >
          <div
            class=" css-onz4xi-ValueContainer"
          >
            <div
              class=" css-1ryi7up-singleValue"
            />
            <input
              aria-activedescendant=""
              aria-autocomplete="list"
              aria-expanded="false"
              aria-haspopup="true"
              aria-invalid="false"
              aria-readonly="true"
              class="css-mohuvp-dummyInput-DummyInput"
              id="react-select-2-input"
              inputmode="none"
              role="combobox"
              tabindex="0"
              value=""
            />
          </div>
          <div
            class=" css-1hm8yhz-IndicatorsContainer"
          >
            <div
              aria-hidden="true"
              class="c0 c1 c2"
            >
              <svg
                fill="currentColor"
                height="16"
                viewBox="0 0 32 32"
                width="16"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="m26.708 12.708-10 10a1 1 0 0 1-1.415 0l-10-10A1 1 0 0 1 6 11h20a1 1 0 0 1 .707 1.707"
                />
              </svg>
            </div>
          </div>
        </div>
      </div>
      <span
        class="c3"
      >
        <p
          aria-live="polite"
          aria-relevant="all"
          id="live-region-log"
          role="log"
        />
        <p
          aria-live="polite"
          aria-relevant="all"
          id="live-region-status"
          role="status"
        />
        <p
          aria-live="assertive"
          aria-relevant="all"
          id="live-region-alert"
          role="alert"
        />
      </span>
    </div>
  </body>,
  "container": .c0 {
  padding-inline-end: 12px;
}

.c3 {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.c1 {
  background: transparent;
  border: none;
  position: relative;
  z-index: 1;
}

.c1 svg {
  height: 1.1rem;
  width: 1.1rem;
}

.c1 svg path {
  fill: #666687;
}

.c2 {
  display: flex;
  background: none;
  border: none;
}

.c2 svg {
  width: 0.9rem;
}

<div>
    <div
      class=" css-1iyvlxg-container"
    >
      <span
        class="css-1f43avz-a11yText-A11yText"
        id="react-select-2-live-region"
      />
      <span
        aria-atomic="false"
        aria-live="polite"
        aria-relevant="additions text"
        class="css-1f43avz-a11yText-A11yText"
        role="log"
      />
      <div
        class=" css-oe0cnm-control"
      >
        <div
          class=" css-onz4xi-ValueContainer"
        >
          <div
            class=" css-1ryi7up-singleValue"
          />
          <input
            aria-activedescendant=""
            aria-autocomplete="list"
            aria-expanded="false"
            aria-haspopup="true"
            aria-invalid="false"
            aria-readonly="true"
            class="css-mohuvp-dummyInput-DummyInput"
            id="react-select-2-input"
            inputmode="none"
            role="combobox"
            tabindex="0"
            value=""
          />
        </div>
        <div
          class=" css-1hm8yhz-IndicatorsContainer"
        >
          <div
            aria-hidden="true"
            class="c0 c1 c2"
          >
            <svg
              fill="currentColor"
              height="16"
              viewBox="0 0 32 32"
              width="16"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="m26.708 12.708-10 10a1 1 0 0 1-1.415 0l-10-10A1 1 0 0 1 6 11h20a1 1 0 0 1 .707 1.707"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
    <span
      class="c3"
    >
      <p
        aria-live="polite"
        aria-relevant="all"
        id="live-region-log"
        role="log"
      />
      <p
        aria-live="polite"
        aria-relevant="all"
        id="live-region-status"
        role="status"
      />
      <p
        aria-live="assertive"
        aria-relevant="all"
        id="live-region-alert"
        role="alert"
      />
    </span>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
