name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Rama a deployar"
        required: true
        type: choice
        options:
          - develop
          - main
          - feature/test
        default: develop
      version_number:
        description: "Versión (tag) de la imagen Docker a deployar (ej: 0.0.1)"
        required: true
        type: string

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  NAMESPACE: "tipsoption-dev"
  REPOSITORY_NAME: "tipsoption"
  PROJECT_NAME: "strapi"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Update image in StatefulSet
        run: |
          # Actualizar la imagen en el StatefulSet con la versión específica
          sed -i "s|IMAGE_PLACEHOLDER|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${{ env.PROJECT_NAME }}-${{ github.event.inputs.version_number }}|g" k8s/dev/strapi/strapi.statefulset.yml

      - name: Deploy to Kubernetes
        run: |
          # Verificar y crear secret de Strapi si no existe
          if ! kubectl get secret strapi-secret -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            echo "Creando secret strapi-secret..."
            kubectl apply -f k8s/dev/strapi/strapi.secret.yml
          else
            echo "Secret strapi-secret ya existe, omitiendo creación"
          fi

          # Aplicar service y statefulset de Strapi
          kubectl apply -f k8s/dev/strapi/strapi.service.yml
          kubectl apply -f k8s/dev/strapi/strapi.statefulset.yml

          # Verificar el despliegue de Strapi
          kubectl rollout status statefulset/strapi -n ${{ env.NAMESPACE }} --timeout=600s

      - name: Verify connection to existing PostgreSQL
        run: |
          echo "Verificando recursos existentes en namespace ${{ env.NAMESPACE }}..."

          # Verificar PostgreSQL existente
          if kubectl get service svc-postgress -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            echo "✅ PostgreSQL service encontrado: svc-postgress"
          else
            echo "❌ PostgreSQL service NO encontrado: svc-postgress"
            exit 1
          fi

          if kubectl get secret postgress-secret -n ${{ env.NAMESPACE }} >/dev/null 2>&1; then
            echo "✅ PostgreSQL secret encontrado: postgress-secret"
          else
            echo "❌ PostgreSQL secret NO encontrado: postgress-secret"
            exit 1
          fi

          # Verificar Strapi resources
          kubectl get secret strapi-secret -n ${{ env.NAMESPACE }} && echo "✅ Strapi secret existe" || echo "ℹ️ Strapi secret será creado"

      - name: Get service status
        run: |
          kubectl get services -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo "Deployment completed for version: ${{ github.event.inputs.version_number }}"
